### Globális változók
@baseUrl = http://localhost:3000
@tanarTokenNagyBela =
@tanarTokenKissMaria =

###
# 0. végpont: GET /api/config
# 0. teszt: Fogadóóra dátumának ellenőrzése.
GET {{baseUrl}}/api/config

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON): {"date": "2025-09-02"} (a .env fájl DATE értéke alapján)

###
# 1. végpont: GET /api/tanarok
# 1. teszt: Összes tanár listázása.
GET {{baseUrl}}/api/tanarok

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON): Tömb, 4 tanárral a tesztadatok.sql alapján.
# Pl. az első elem:
# {
#   "tanarID": 1,
#   "nev": "Nagy Béla",
#   "terem": "101-es terem",
#   "targyak": "Matematika, Fizika"
# }

###
# 2. végpont: GET /api/tanarok/:tanarID/fogadoora

###
# 2.1 teszt: Létező tanár, vannak foglalásai a konfigurált időintervallumban
# Leírás: Kiss Mária (ID: 2) fogadóórája. A .env START=18:00, így a 18:00-s foglalása látszik.
GET {{baseUrl}}/api/tanarok/2/fogadoora

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON):
# {
#   "tanarID": 2,
#   "nev": "Kiss Mária",
#   "terem": "102-es terem",
#   "targyak": "Magyar nyelv és irodalom",
#   "idopontok": [
#     { "idosav": "18:00", "statusz": "foglalt", "foglaloAdatai": {"tanuloNeve": "Gyakorló Gréta", "oktatasiAzonosito": "70000000004"} },
#     { "idosav": "18:10", "statusz": "szabad" },
#     { "idosav": "18:20", "statusz": "szabad" },
#     { "idosav": "18:30", "statusz": "szabad" },
#     { "idosav": "18:40", "statusz": "szabad" },
#     { "idosav": "18:50", "statusz": "szabad" }
#   ]
# }

###
# 2.2 teszt: Létező tanár, nincsenek foglalásai a konfigurált időintervallumban
# Leírás: Horváth Éva (ID: 4) fogadóórája, akinek nincsenek foglalásai.
GET {{baseUrl}}/api/tanarok/4/fogadoora

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON):
# {
#   "tanarID": 4,
#   "nev": "Horváth Éva",
#   "terem": "205-ös terem",
#   "targyak": "Angol nyelv",
#   "idopontok": [
#     { "idosav": "18:00", "statusz": "szabad" },
#     { "idosav": "18:10", "statusz": "szabad" },
#     { "idosav": "18:20", "statusz": "szabad" },
#     { "idosav": "18:30", "statusz": "szabad" },
#     { "idosav": "18:40", "statusz": "szabad" },
#     { "idosav": "18:50", "statusz": "szabad" }
#   ]
# }

###
# 2.3 teszt: Nem létező tanár
# Leírás: Nem létező tanár ID (99) lekérdezése.
GET {{baseUrl}}/api/tanarok/99/fogadoora

# Elvárt eredmény:
# Státuszkód: 404 Not Found
# Válasz body (JSON): {"hiba": "A megadott tanár nem található."}

###
# 3. végpont: POST /api/tanarok/:tanarID/foglalasok

###
# 3.1 teszt: Sikeres foglalás új időpontra
# Leírás: Új időpont foglalása Horváth Évához (ID: 4) egy szabad idősávra (18:30).
POST {{baseUrl}}/api/tanarok/4/foglalasok
Content-Type: application/json

{
  "idosav": "18:30",
  "tanuloNeve": "Új Foglaló Ubul",
  "oktatasiAzonosito": "71111111111"
}

# Elvárt eredmény:
# Státuszkód: 201 Created
# Válasz body (JSON): (foglalasID változhat)
# {
#   "foglalasID": 5,
#   "tanarID": 4,
#   "idosav": "18:30",
#   "tanuloNeve": "Új Foglaló Ubul",
#   "oktatasiAzonosito": "71111111111"
# }

###
# 3.2 teszt: Foglalás már foglalt idősávra ugyanannál a tanárnál
# Leírás: Kísérlet foglalásra Kiss Máriához (ID: 2) a már foglalt 18:00-s idősávra.
POST {{baseUrl}}/api/tanarok/2/foglalasok
Content-Type: application/json

{
  "idosav": "18:00",
  "tanuloNeve": "Másik Foglaló",
  "oktatasiAzonosito": "72222222222"
}

# Elvárt eredmény:
# Státuszkód: 409 Conflict
# Válasz body (JSON): {"hiba": "Ez az idősáv ennél a tanárnál már foglalt."}

###
# 3.3 teszt: Tanuló már foglalt ehhez a tanárhoz
# Leírás: Gyakorló Gréta (70000000004) újabb időpontot próbál foglalni Kiss Máriához (ID: 2).
POST {{baseUrl}}/api/tanarok/2/foglalasok
Content-Type: application/json

{
  "idosav": "18:40",
  "tanuloNeve": "Gyakorló Gréta",
  "oktatasiAzonosito": "70000000004"
}

# Elvárt eredmény:
# Státuszkód: 409 Conflict
# Válasz body (JSON): {"hiba": "Ennél a tanárnál már van foglalásod."}

###
# 3.4 teszt: Tanuló már foglalt ebben az idősávban másik tanárnál
# Leírás: Gyakorló Gréta (70000000004) 18:00-ra próbál foglalni Horváth Évához (ID: 4), 
# miközben már van foglalása Kiss Máriánál.
POST {{baseUrl}}/api/tanarok/4/foglalasok
Content-Type: application/json

{
  "idosav": "18:00",
  "tanuloNeve": "Gyakorló Gréta",
  "oktatasiAzonosito": "70000000004"
}

# Elvárt eredmény:
# Státuszkód: 409 Conflict
# Válasz body (JSON): {"hiba": "Ebben az időpontban már van egy másik foglalásod."}

###
# 3.5 teszt: Hiányos adatokkal történő foglalás
# Leírás: Foglalási kísérlet hiányos adatokkal (oktatasiAzonosito hiányzik).
POST {{baseUrl}}/api/tanarok/4/foglalasok
Content-Type: application/json

{
  "idosav": "18:10",
  "tanuloNeve": "Hiányos Adat"
}

# Elvárt eredmény:
# Státuszkód: 400 Bad Request
# Válasz body (JSON): {"hiba": "Minden mező kitöltése kötelező (idosav, tanuloNeve, oktatasiAzonosito)."}

###
# 3.6 teszt: Foglalás a fogadóóra dátuma után
# Leírás: Foglalási kísérlet a fogadóóra dátuma (.env DATE=2025-09-02) után.
# Ezt a tesztet úgy lehet érdemben futtatni, ha a szerver aktuális dátuma 2025-09-02 utáni.
# Vagy ideiglenesen átállítod a .env DATE értékét egy múltbeli dátumra a teszt idejére.
POST {{baseUrl}}/api/tanarok/4/foglalasok
Content-Type: application/json

{
  "idosav": "18:00",
  "tanuloNeve": "Elkésett Elek",
  "oktatasiAzonosito": "73333333333"
}

# Elvárt eredmény (ha a mai dátum > FOGADOORA_DATUM):
# Státuszkód: 403 Forbidden
# Válasz body (JSON): {"hiba": "Foglalás csak a fogadóóra napjáig lehetséges."}

###
# 4. végpont: DELETE /api/foglalasok

###
# 4.1 teszt: Sikeres foglalás törlése
# Leírás: Gyakorló Gréta (70000000004) foglalásának törlése Kiss Máriánál (ID: 2).
# FIGYELEM: Ez a teszt módosítja az adatbázist. Ha újra akarod tesztelni a foglalásait,
# vagy a tesztadatok.sql-t kell újra futtatni, vagy manuálisan újra létrehozni a foglalást.
DELETE {{baseUrl}}/api/foglalasok?tanarID=2&oktatasiAzonosito=70000000004

# Elvárt eredmény:
# Státuszkód: 204 No Content

###
# 4.2 teszt: Nem létező foglalás törlése
# Leírás: Nem létező foglalás törlésének kísérlete.
DELETE {{baseUrl}}/api/foglalasok?tanarID=99&oktatasiAzonosito=70000000000

# Elvárt eredmény:
# Státuszkód: 404 Not Found
# Válasz body (JSON): {"hiba": "Nincs ilyen foglalás a megadott tanárnál ezzel az oktatási azonosítóval."}

###
# 4.3 teszt: Hiányzó query paraméterekkel történő törlés
# Leírás: Törlési kísérlet hiányzó tanarID paraméterrel.
DELETE {{baseUrl}}/api/foglalasok?oktatasiAzonosito=70000000004

# Elvárt eredmény:
# Státuszkód: 400 Bad Request
# Válasz body (JSON): {"hiba": "A tanarID és oktatasiAzonosito query paraméterek megadása kötelező."}

###
# 5. végpont: GET /api/tanulok/:oktatasiAzonosito/foglalasok

###
# 5.1 teszt: Létező tanuló foglalásainak lekérdezése
# Leírás: Próba Péter (70000000003) foglalásainak lekérdezése.
# (A tesztadatok.sql alapján van egy foglalása Kiss Máriához 17:10-re)
GET {{baseUrl}}/api/tanulok/70000000003/foglalasok

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON):
# [
#   {
#     "foglalasID": 3,
#     "tanarID": 2,
#     "tanarNev": "Kiss Mária",
#     "idosav": "17:10",
#     "tanuloNeve": "Próba Péter",
#     "oktatasiAzonosito": "70000000003"
#   }
# ]

###
# 5.2 teszt: Olyan tanuló foglalásainak lekérdezése, akinek nincs foglalása
# Leírás: Olyan tanuló (79999999999) foglalásainak lekérdezése, akinek nincs foglalása.
GET {{baseUrl}}/api/tanulok/79999999999/foglalasok

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON): [] (üres tömb)

###
# 6. végpont: POST /api/auth/login

###
# 6.1 teszt: Sikeres tanári bejelentkezés (Nagy Béla)
# Leírás: Nagy Béla bejelentkezése helyes adatokkal. A tokent elmentjük.
# @name loginNagyBela
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "nev": "Nagy Béla",
  "jelszo": "nagyb"
}

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON):
# {
#   "token": "...",
#   "tanar": { "tanarID": 1, "nev": "Nagy Béla", "terem": "101-es terem", "targyak": "Matematika, Fizika" }
# }
### Token mentése:
@tanarTokenNagyBela = {{loginNagyBela.response.body.token}}

###
# 6.1.1 teszt: Sikeres tanári bejelentkezés (Kiss Mária)
# Leírás: Kiss Mária bejelentkezése helyes adatokkal. A tokent elmentjük.
# @name loginKissMaria
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "nev": "Kiss Mária",
  "jelszo": "kissm"
}

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON):
# {
#   "token": "...",
#   "tanar": { "tanarID": 2, "nev": "Kiss Mária", "terem": "102-es terem", "targyak": "Magyar nyelv és irodalom" }
# }
### Token mentése:
@tanarTokenKissMaria = {{loginKissMaria.response.body.token}}

###
# 6.2 teszt: Sikertelen bejelentkezés rossz jelszóval
# Leírás: Nagy Béla bejelentkezési kísérlete rossz jelszóval.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "nev": "Nagy Béla",
  "jelszo": "RosszJelszo"
}

# Elvárt eredmény:
# Státuszkód: 401 Unauthorized
# Válasz body (JSON): {"hiba": "Hibás felhasználónév vagy jelszó."}

###
# 6.3 teszt: Sikertelen bejelentkezés nem létező felhasználónévvel
# Leírás: Bejelentkezési kísérlet nem létező tanárnévvel.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "nev": "Nem Létező Tanár",
  "jelszo": "BarmilyenJelszo"
}

# Elvárt eredmény:
# Státuszkód: 401 Unauthorized
# Válasz body (JSON): {"hiba": "Hibás felhasználónév vagy jelszó."}

###
# 6.4 teszt: Hiányos adatokkal történő bejelentkezés
# Leírás: Bejelentkezési kísérlet hiányzó jelszóval.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "nev": "Nagy Béla"
}

# Elvárt eredmény:
# Státuszkód: 400 Bad Request
# Válasz body (JSON): {"hiba": "A név és jelszó megadása kötelező."}

###
# 7. végpont: GET /api/auth/profil/foglalasok (Authentikációt igényel)

###
# 7.1 teszt: Bejelentkezett tanár (Kiss Mária) foglalásainak sikeres lekérdezése
# Leírás: Kiss Mária (ID: 2) foglalásainak lekérdezése érvényes token-nel.
# Először futtasd a "6.1.1 teszt: Sikeres tanári bejelentkezés (Kiss Mária)" részt a token megszerzéséhez!
GET {{baseUrl}}/api/auth/profil/foglalasok
Authorization: Bearer {{tanarTokenKissMaria}}

# Elvárt eredmény:
# Státuszkód: 200 OK
# Válasz body (JSON): Kiss Mária összes foglalása a tesztadatok.sql alapján.
# [
#   {
#     "foglalasID": 3,
#     "idosav": "17:10",
#     "tanuloNeve": "Próba Péter",
#     "oktatasiAzonosito": "70000000003"
#   }
# ]

###
# 7.2 teszt: Lekérdezés érvénytelen/lejárt token-nel
# Leírás: Foglalások lekérdezésének kísérlete érvénytelen token-nel.
GET {{baseUrl}}/api/auth/profil/foglalasok
Authorization: Bearer ERVENYTELEN_TOKEN_VAGY_LEJART

# Elvárt eredmény:
# Státuszkód: 403 Forbidden
# Válasz body (JSON): {"hiba": "Hibás token."}

###
# 7.3 teszt: Lekérdezés token nélkül
# Leírás: Foglalások lekérdezésének kísérlete token nélkül.
GET {{baseUrl}}/api/auth/profil/foglalasok

# Elvárt eredmény:
# Státuszkód: 401 Unauthorized
# Válasz body (JSON): {"hiba": "Nincs token megadva."}
